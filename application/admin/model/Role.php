<?php/** * Created by PhpStorm. * User: Administrator * Date: 2019/8/1 * Time: 14:48 */namespace app\admin\model;use app\admin\model\RoleAccess as RoleAccessModel;class Role extends BaseModel{    /**     * 树状排序     * @param $info     * @param int $parent_id     * @param int $deep     * @return array     */    public function gettree($info,$parent_id = 0,$deep = 1)    {        $date = [];        foreach($info as $k=>$v){            if($v['parent_id'] == $parent_id){                $v['deep'] = $deep;                $v['role_name1'] = str_repeat('--| ',$deep-1).$v['role_name'];                $date[] = $v;                $date = array_merge($date,self::getTree($info,$v['id'],$deep+1));            }        }        return $date;    }    /**     * 查询所有数据，并排列成树状     * @return array     */    public function index($limit)    {        $info = $this->paginate($limit);        $info = $this->gettree($info,$parent_id = 0,$deep = 1);        return $info;    }    /**     * 添加角色     * @param $date     * @return bool     * @throws \think\exception\PDOException     */    public function add_img($date)    {        $this->startTrans();        try{            //添加角色            $date['create_time'] = date('Y-m-d H:i:s', time());            $date['update_time'] = date('Y-m-d H:i:s', time());            $this->allowField(true)->save($date);            //添加角色-权限            $access = explode(',',substr($date['access'],0,strlen($date['access'])-1));            (new RoleAccessModel())->addall($access,$this['id']);            $this->commit();            return true;        } catch (\Exception $exception){            $exception->getMessage();            $this->rollback();            return false;        }    }    /**     * 删除角色     * @param $id     * @return bool|int     * @throws \think\exception\PDOException     */    public function img_del($id)    {        $this->startTrans();        try{            //判断是否存在子权限            if($this->where('parent_id',$id)->find()){                return 2; //当前角色下存在子角色，不允许删除            }else{                //删除权限                (new RoleAccessModel())::deleteAll(['role_id' => $id]);                $this::destroy($id);                $this->commit();                return 1;            }        }catch (\Exception $exception){            $exception->getMessage();            $this->rollback();            return false;        }    }    /**     * 获取角色信息     * @param $id     * @return mixed     */    public function getinfo($id)    {        return $this->find($id);    }    /**     * 修改角色     * @param $date     * @return bool|int     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     * @throws \think\exception\PDOException     */    public function updateedit($date,$limit)    {        //判断上级角色不能为自己原角色的子角色 => 查找机子所有子角色，判断所选角色是否在其中        $allroles = $this->index($limit);        $conditionroles = $this->getconditions($allroles,$date['id']);        $conditionroles = array_column($conditionroles,'id');        if(in_array($date['parent_id'],$conditionroles)){            return 4; //上级角色不能为自己原角色的子角色        }else{            $roleaccess = new RoleAccessModel();            $selfaccesss    = $roleaccess->findAccess($date['id']);            $selectaccesss  = explode(',',substr($date['access'],0,strlen($date['access'])-1));            $this->startTrans();            try {                //上级角色修改                $this->isUpdate(true)->allowField(true)->save($date);                //权限修改                //删除少的权限                $delaccess = array_diff($selfaccesss,$selectaccesss);                $where[] = ['role_id','=',$date['id']];                $where[] = ['access_id','in', implode($delaccess,',')];                $roleaccess::deleteAll($where);                //添加新的权限                $newaccess = array_diff($selectaccesss,$selfaccesss);                $roleaccess->addall($newaccess,$date['id']);                $this->commit();                return true;            } catch (\Exception $exception) {                $exception->getMessage();                $this->rollback();                return false;            }        }    }    /**     * 传入一个id，得到所有子id     * @param $date     * @param $id     * @return array     */    public function getconditions($date,$id)    {        $info = [];        foreach($date as $k=>$v){            if($v['parent_id'] == $id){                $info[] = $v;                $info = array_merge($info,self::getconditions($date,$v['id']));            }        }        return $info;    }}