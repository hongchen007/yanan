<?php/** * Created by PhpStorm. * User: Administrator * Date: 2019/7/17 * Time: 19:27 */namespace app\admin\model;use think\facade\Session;use app\admin\model\UserRole as UserRoleModel;use app\admin\model\Code as CodeModel;class User extends BaseModel{    // 定义多种登录方式    private $loginWay = [        // 用户名        'user_name',        // 邮箱        'user_email',        // 电话        'phone'    ];    /**     * 登录     * @param $date     * @return bool|int     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function login($date)    {        foreach($this->loginWay as $k=>$v){            $userinfo = $this->where([$v=>$date['user_name']])->find();            if($userinfo){                break;            }        }        if(!$userinfo){            return 21; //用户名不存在        }        if($userinfo['user_password'] !== appkit_hash($date['user_password'])){            return 22; //密码不正确        }        //存session        Session::set('userinfo',$userinfo);        return true;    }    /**     * 修改密码     * @param $date     * @return bool|int     * @throws \think\Exception     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     * @throws \think\exception\PDOException     */    public function editpasseord($date)    {        //验证密码是否正确        $sessioninfo = Session::get('userinfo');        $userinfo = $this->where([            'user_name'      => $sessioninfo['user_name'],            'user_password'  => appkit_hash($date['oldPassword'])        ])->find();        if(!$userinfo){            return 3;        }else{            //执行修改            if($this->where(['id'=>$sessioninfo['id']])->update(['user_password'=>appkit_hash($date['user_password'])])){                Session::delete('userinfo');                return true;            }else{                return 11;            }        }    }    //列表页    public function index($data,$limit)    {        $info = $this            ->where($data)            ->paginate($limit);        foreach($info as $k=>$v){            if($v['user_sex'] == '1'){                $info[$k]['user_sex'] = '男';            }else{                $info[$k]['user_sex'] = '女';            }        }        return $info;    }    //添加    public function add_img($arr)    {//        dump($arr);        //判断用户名是否存在        $info = $this->field('user_name,phone,user_email')->select()->toArray();        if(in_array($arr['user_name'],array_column($info,'user_name'))){            return 101008; //用户名已经存在        }        if(in_array($arr['phone'],array_column($info,'phone'))){            return 101009; //电话已经存在        }        if(in_array($arr['user_email'],array_column($info,'user_email'))){            return 101010; //邮箱已经存在        }        $this->startTrans();        try {            //添加用户数据处理            $arr['create_time']    = date('Y-m-d H:i:s', time());            $arr['update_time']    = date('Y-m-d H:i:s', time());            $arr['user_password']  = appkit_hash($arr['user_password']);            $this->allowField(true)->save($arr);            //添加用户的角色            (new UserRoleModel())->addroleuser($arr['permissions'],$this['id']);            $this->commit();            return true;        } catch (\Exception $exception) {            $exception->getMessage();            $this->rollback();            return false;        }    }    //删除    public function img_del($date)    {        $this->startTrans();        try {            $UserRoleModel = new UserRoleModel;            $where['role_id'] = $date;            $UserRoleModel->delall($where);            $this->where('id',$date)->delete();            $this->commit();            return true;        } catch (\Exception $exception){            $this->rollback();            $exception->getMessage();            return false;        }    }    //查询修改信息    public function updateinfo($date)    {        $arr = $this->find($date);        return $arr;    }    /**     * 执行修改     * @param $date     */    public function updateedit($date)    {        //唯一性验证        $info = $this->field('id,user_name,phone,user_email,user_password')->select()->toArray();        foreach($info as $k=>$v){            if($v['id'] ==$date['id']){                //判断是否修改密码                if($date['user_password'] == $v['user_password']){                    unset($date['user_password']);                }else{                    $date['user_password'] = appkit_hash($date['user_password']);                }                unset($info[$k]);            }        }        if(in_array($date['user_name'],array_column($info,'user_name'))){            return 101008; //用户名已经存在        }        if(in_array($date['phone'],array_column($info,'phone'))){            return 101009; //电话已经存在        }        if(in_array($date['user_email'],array_column($info,'user_email'))){            return 101010; //邮箱已经存在        }        //修改数据        $userrolemodel = new UserRoleModel();        $date['update_time'] = date('Y-m-d H:i:s', time());        //用户所属角色id        $allrole = $userrolemodel->where('user_id', $date['id'])->column('role_id');        //所有新角色        $newrole = explode(',', substr($date['permissions'],0,strlen($date['permissions'])-1));        $this->startTrans();        try {            //修改用户信息            $this->allowField(true)->isUpdate(true)->update($date);            //添加角色            $addrole = array_diff($newrole,$allrole);            $userrolemodel->addall($addrole, $date['id']);            //删除角色            $delrole = array_diff($allrole,$newrole);            $userrolemodel->alldel($delrole,$date['id']);            $this->commit();            return true;        } catch (\Exception $exception){            $exception->getMessage();            $this->rollback();            return false;        }    }    /**     * 查找该邮箱是否存在     * @param $date     * @return array|\PDOStatement|string|\think\Model|null     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function findemail($date)    {        return $this->where('user_email',$date)->find();    }    /**     * 注册账户     * @param $date     * @return bool|int     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function reg($date)    {        //验证手机号和用户名的唯一性        $allinfo = $this->field('phone,user_name')->select()->toArray();        if(in_array($date['phone'],array_column($allinfo,'phone'))){            return 21; //手机号码已经存在        }        if(in_array($date['user_name'],array_column($allinfo,'user_name'))){            return 22; //用户名已经存在        }        //验证验证码的正确性        $codemodel = new CodeModel();        $codeinfo = $codemodel->checkcode($date);        if($codeinfo !== true){            return $codeinfo;        }        //添加用户        $date['create_time'] = date('Y-m-d H:i:s',time());        $date['update_time'] = date('Y-m-d H:i:s',time());        $date['user_password'] = appkit_hash($date['user_password']);        try{            $this->allowField(true)->save($date);            return true;        } catch (\Exception $exception){            $exception->getMessage();            return false;        }    }    /**     * 找回密码     * @param $date     * @return bool|int     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function forget($date)    {        //验证验证码的正确性        $codemodel = new CodeModel();        $codeinfo = $codemodel->checkcode($date);        if($codeinfo !== true){            return $codeinfo;        }        try{            $info = $this->where('user_email',$date['user_email'])->find();            $info->user_password = appkit_hash($date['user_password']);            $info->save();            return true;        } catch (\Exception $exception){            $exception->getMessage();            return false;        }    }}